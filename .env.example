# ⚠️  SECURITY WARNING - DO NOT COMMIT REAL CREDENTIALS TO GIT!
# This is a template file. Copy to .env and fill with actual values.
# Usage: cp .env.example .env

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Connection String (Primary Method)
# Format: postgresql://user:password@host:port/database
DATABASE_URL=postgresql://username:password@your-database-host:5432/your-database-name

# Alternative: Individual Database Parameters (Fallback if DATABASE_URL not set)
DB_HOST=your-database-host.supabase.com
DB_PORT=6543
DB_USER=postgres.your_project_id
DB_PASSWORD=your_strong_password_here
DB_NAME=postgres
DB_SSLMODE=require

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Server Bind Address and Port
# Use 0.0.0.0 to bind to all interfaces (production)
# Use localhost or 127.0.0.1 for local development only
SERVER_HOST=0.0.0.0
SERVER_PORT=8080

# =============================================================================
# JWT AUTHENTICATION
# =============================================================================

# JWT Key Paths
# Generate keys with: ssh-keygen -t rsa -b 4096 -m PEM -f private.key
JWT_PRIVATE_KEY_PATH=private.key
JWT_PUBLIC_KEY_PATH=public.key

# Optional: JWT Token Expiration (in hours)
# JWT_ACCESS_TOKEN_EXPIRY=24
# JWT_REFRESH_TOKEN_EXPIRY=168

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Environment (development, staging, production)
# This affects rate limiting and security policies
ENVIRONMENT=development

# Rate Limiting (requests per minute)
# Development: More lenient
# Production: Stricter to prevent abuse
RATE_LIMIT_REQUESTS_PER_MINUTE=100

# Login-specific rate limiting (attempts per minute per IP)
LOGIN_RATE_LIMIT=5

# IP Whitelist for Admin (comma-separated, optional)
# Example: ADMIN_IP_WHITELIST=192.168.1.100,10.0.0.5
# ADMIN_IP_WHITELIST=

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Debug Mode (true/false)
# WARNING: Never enable in production!
DEBUG=true

# Log Level (debug, info, warn, error)
LOG_LEVEL=info

# Connection Pool Settings
MAX_ROUTER_CONNECTIONS=5
CONNECTION_IDLE_TIMEOUT=300

# Circuit Breaker Settings
CIRCUIT_BREAKER_THRESHOLD=3
CIRCUIT_BREAKER_TIMEOUT=30

# =============================================================================
# OPTIONAL: MONITORING & OBSERVABILITY
# =============================================================================

# Prometheus Metrics (true/false)
# ENABLE_METRICS=true
# METRICS_PORT=9090

# Sentry Error Tracking (optional)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# =============================================================================
# OPTIONAL: CACHING
# =============================================================================

# Redis Cache (optional, for future use)
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=
# CACHE_TTL_SECONDS=300

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# 1. Copy this file: cp .env.example .env
# 2. Edit .env with your actual values
# 3. NEVER commit .env to Git (it's in .gitignore)
# 4. For production, use environment variables or secret management
# 5. Validate config with: go run cmd/main.go (check startup logs)

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================

# For production environments:
# - Use strong, randomly generated passwords
# - Store secrets in environment variables or secret vault (HashiCorp Vault, AWS Secrets Manager)
# - Enable TLS/SSL for all connections
# - Set DEBUG=false
# - Use restrictive rate limits
# - Configure firewall rules
# - Regular security audits
# - Rotate JWT keys periodically
